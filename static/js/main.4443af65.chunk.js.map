{"version":3,"sources":["components/Calculator.js","components/Buttons.js","components/Display.js","components/App.js","serviceWorker.js","index.js"],"names":["Calculator","props","_this","Object","C_Users_bnels_Desktop_dev_react_calculator_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","C_Users_bnels_Desktop_dev_react_calculator_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","C_Users_bnels_Desktop_dev_react_calculator_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","handleButtonClick","e","prevInput","String","state","input","keyInput","target","value","operators","lastChar","charAt","length","firstChar","clearDisplay","handleZero","includes","setState","substring","inputConcat","checkDecimal","inputString","indexOf","result","eval","output","split","slice","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","className","_Display__WEBPACK_IMPORTED_MODULE_7__","screenTopText","toString","screenBottomText","_Buttons__WEBPACK_IMPORTED_MODULE_6__","clicked","React","Component","Buttons","Button","id","buttonText","isNaN","onClick","react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","Display","App","react_default","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4443af65.chunk.js","sourcesContent":["import React from 'react';\r\nimport Buttons from './Buttons';\r\nimport Display from './Display';\r\n\r\nclass Calculator extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            input: \"0\",\r\n            output: \"0\"\r\n        }\r\n    }\r\n\r\n    handleButtonClick = (e) => {\r\n        const prevInput = String(this.state.input);\r\n        const keyInput = String(e.target.value);\r\n        const operators = \"+/*-\";\r\n        const lastChar = prevInput.charAt(prevInput.length-1);\r\n        const firstChar = prevInput.length === 1 ? true : false;\r\n\r\n        switch(keyInput) {\r\n            case \"CE\":\r\n                this.clearDisplay();\r\n                break;\r\n            case \"1\":\r\n            case \"2\":\r\n            case \"3\":\r\n            case \"4\":\r\n            case \"5\":\r\n            case \"6\":\r\n            case \"7\":\r\n            case \"8\":\r\n            case \"9\":\r\n            case \"0\":\r\n                this.handleZero(firstChar, prevInput, keyInput);\r\n                break;\r\n            case \"+\":\r\n            case \"*\":\r\n            case \"/\":\r\n            case \"-\":\r\n                if(\"+-/*\".includes(lastChar)) {\r\n                    this.setState({\r\n                        input: prevInput.substring(0, prevInput.length-1) + keyInput\r\n                    })\r\n                } else {\r\n                    this.inputConcat(keyInput);\r\n                }\r\n                break;\r\n            case \".\":\r\n                if (this.checkDecimal(prevInput)) {\r\n                    return;\r\n                } else {\r\n                    this.inputConcat(keyInput);\r\n                }\r\n                break;\r\n            case \"=\":\r\n                let inputString = prevInput;\r\n                if(operators.indexOf(lastChar) > -1) {\r\n                    inputString = inputString.substring(0, inputString.length-1);\r\n                }\r\n                let result = eval(inputString);\r\n                this.setState({\r\n                    input: result,\r\n                    output: result\r\n                })\r\n                break;\r\n            default:\r\n                return;\r\n\r\n        }    \r\n    }\r\n\r\n    checkDecimal(input) {\r\n        const regex = /[-+*/]/g;\r\n        const lastTerm = input.split(regex).slice(-1);\r\n        return lastTerm[0].includes(\".\");\r\n      }\r\n\r\n    handleZero(firstChar, prevInput, keyInput) {\r\n        if (firstChar && prevInput === \"0\") {\r\n            this.setState({\r\n                input: keyInput\r\n            })\r\n        } else {\r\n            this.setState({\r\n                input: prevInput + keyInput\r\n            })\r\n        };\r\n    }\r\n\r\n    inputConcat = (value) => {\r\n        this.setState({\r\n            input: this.state.input + String(value)\r\n        })\r\n    }\r\n\r\n    clearDisplay = () => {\r\n        this.setState({\r\n            input: \"0\",\r\n            output: \"0\"\r\n        })\r\n    }\r\n\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"container\">\r\n                <Display screenTopText={this.state.input.toString()} screenBottomText={this.state.output.toString()}/>\r\n                <Buttons clicked={(this.handleButtonClick)}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Calculator;","import React from 'react';\r\n\r\nclass Buttons extends React.Component {\r\n    // constructor(props) {\r\n    //     super(props);\r\n    // }\r\n\r\n    render() {\r\n        return(\r\n            <div className='buttonGrid'>\r\n                <Button id=\"seven\" buttonText=\"7\" clicked={this.props.clicked}/>\r\n                <Button id=\"eight\" buttonText= \"8\" clicked={this.props.clicked}/>\r\n                <Button id=\"nine\" buttonText=\"9\" clicked={this.props.clicked}/>\r\n                <Button id=\"divide\" buttonText=\"/\" clicked={this.props.clicked}/>\r\n                <Button id=\"four\" buttonText=\"4\" clicked={this.props.clicked}/>\r\n                <Button id=\"five\" buttonText=\"5\" clicked={this.props.clicked}/>\r\n                <Button id=\"six\" buttonText=\"6\" clicked={this.props.clicked}/>\r\n                <Button id=\"multiply\" buttonText=\"*\" clicked={this.props.clicked}/>\r\n                <Button id=\"one\" buttonText=\"1\" clicked={this.props.clicked}/>\r\n                <Button id=\"two\" buttonText=\"2\" clicked={this.props.clicked}/>\r\n                <Button id=\"three\" buttonText=\"3\" clicked={this.props.clicked}/>\r\n                <Button id=\"subtract\" buttonText=\"-\" clicked={this.props.clicked}/>\r\n                <Button id=\"decimal\" buttonText=\".\" clicked={this.props.clicked}/>\r\n                <Button id=\"zero\" buttonText=\"0\" clicked={this.props.clicked}/>\r\n                <Button id=\"equals\" buttonText=\"=\" clicked={this.props.clicked}/>\r\n                <Button id=\"add\" buttonText=\"+\" clicked={this.props.clicked}/>\r\n                <Button id=\"clear\" buttonText=\"CE\" clicked={this.props.clicked} />\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n}\r\n\r\nfunction Button(props) {\r\n    return(\r\n        <button className={\r\n            !isNaN(props.buttonText) ? 'digit' \r\n            : props.buttonText.length > 1 ? 'clear' \r\n            : 'operator'}\r\n            id={props.id}\r\n            onClick={props.clicked}\r\n            value={props.buttonText}\r\n            >\r\n            {props.buttonText}\r\n        </button>\r\n        \r\n    );\r\n}\r\n\r\nexport default Buttons;","import React from 'react';\r\n\r\nfunction Display(props) {\r\n    return(\r\n        <div className=\"display\">\r\n            \r\n            <div className=\"screen\">\r\n                <span id=\"display\">{props.screenTopText}</span><br /> \r\n                <span>{props.screenBottomText}</span>              \r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Display;","import React from 'react';\nimport Calculator from './Calculator';\nimport '../App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Calculator />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}